// @use "sass:math";
// @use "sass:list";

// // Seed
// $seed: 0;

// // Config
// $n: 5;
// $sphereRadiusMin: 15;
// $sphereRadiusMax: 45;
// $pointRadiusMin: 0.5;
// $pointRadiusMax: 2;

// // Colors
// $cBackground: #d3d3d3;
// $cPaint: #000;

// @function rng() {
// 	$seed: $seed + 1 !global;

//     $a: $seed * 15485863;
// 	@return ($a * $a * $a % 2038074743) / 2038074743;
// }

// // Point painter
// @function paintPoint($x, $y, $r, $out, $color: #fff) {
// 	$out: list.set-nth($out, 1, list.append(list.nth($out, 1), radial-gradient(circle, $color 62.5%, #0000 70%), $separator: comma));
// 	$out: list.set-nth($out, 2, list.append(list.nth($out, 2), ($r $r), $separator: comma));
// 	$out: list.set-nth($out, 3, list.append(list.nth($out, 3), ($x $y), $separator: comma));
	
// 	@return $out;
// }

// // Line painter
// @function paintLine($x, $y, $r, $rad, $out, $color: #fff) {
// 	$out: list.set-nth($out, 1, list.append(list.nth($out, 1), conic-gradient(from ($rad + math.$pi) * 1rad, #0000 0deg, $color 0.5deg, #0000 1deg), $separator: comma));
// 	$out: list.set-nth($out, 2, list.append(list.nth($out, 2), ($r $r), $separator: comma));
// 	$out: list.set-nth($out, 3, list.append(list.nth($out, 3), ($x $y), $separator: comma));
	
// 	@return $out;
// }

// :root {
//     --test-0: 1;
//     --test-1: 2;
//     --test-2: 2;
//     --test-3: 2;
//     --test-4: 2;
//     --test-5: 2;

//   }

// // Random float from <low, high> interval
// @function rf($low, $high) {
// 	@return $low + rng() * ( $high - $low );
// }

// // $test: var(--test); // Get the string representation of the array

// // Convert the string to a list by splitting it using a comma and trimming spaces
// $testList: var(--test);
// // $firstElement: nth($testList, 1); // Access the first element
// // $secondElement: nth($testList, 2); // Access the second element
// // $thirdElement: nth($testList, 3); // Access the third element



// .sphere {
// 	width: 100vmin;
// 	aspect-ratio: 1;

// 	// Define paint output buffer
// 	$out: [ [], [], [] ];

// 	// Paint
// 	@for $i from 0 to $n {
// 		// Get a random distance from the center
// 		$r: 20;
		
// 		// Get a random angle around the center
// 		$rad: rf(0, math.$pi * 2);

// 		// Get x and y for radius $r and angle $rad.
// 		$x: $r * math.sin($rad) + 50;
// 		$y: $r * math.cos($rad) + 50;
		
// 		// Get the rough lenght of the line (slightly oversized to make it easy and give a more dense feeling to the center)
// 		$lineRadius: $r * 2 * 1vmin;
		
// 		// Paint the line between 0 0 and x y
// 		$out: paintLine(
// 			$x * 1vmin - ($lineRadius / 2),
// 			$y * 1vmin - ($lineRadius / 2),
// 			$lineRadius,
// 			(2 * math.$pi) - $rad + math.$pi,
// 			$out,
// 			$cPaint
// 		);

//         $propertyName: --test- + $i;
//         $propertyValue: var($propertyName);
//         @debug "The value of myVariable is #{$propertyValue}";

// 		// Get a random radius for the point
// 		$pointRadius: calc(2 * 1vmin);
		
// 		// Paint the point at x y with radius $pointRadius
// 		$out: paintPoint(
// 			$x * 1vmin - ($pointRadius / 2),
// 			$y * 1vmin - ($pointRadius / 2),
// 			$pointRadius,
// 			$out,
// 			$cPaint
// 		);
// 	}
	
// 	// Paint center dot
// 	$pointRadius: 1 * 1vmin;
// 	$out: paintPoint(
// 			50 * 1vmin - ($pointRadius / 2),
// 			50 * 1vmin - ($pointRadius / 2),
// 			$pointRadius,
// 			$out,
// 			$cBackground
// 		);
	
// 	// Define background outputs (can't be empty)
// 	$backgroundImage: radial-gradient(circle, #0000, #0000);
// 	$backgroundSize: 0 0;
// 	$backgroundPosition: 0 0;
	
// 	// Apply paint to outputs
// 	@each $i in list.nth($out, 1) { $backgroundImage: $i + #{','$backgroundImage}; }
// 	@each $s in list.nth($out, 2) { $backgroundSize: $s + #{','$backgroundSize}; }
// 	@each $p in list.nth($out, 3) { $backgroundPosition: $p + #{','$backgroundPosition}; }

// 	// Apply outputs as background
// 	background-repeat: no-repeat;
// 	background-color: $cBackground;
// 	background-image: $backgroundImage;
// 	background-size: $backgroundSize;
// 	background-position: $backgroundPosition;
// }

// // Boilerplate
// body {
// 	background-color: $cBackground;
// }
